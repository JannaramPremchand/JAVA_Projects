/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.crio.xlido;

import com.crio.xlido.services.*;
import com.crio.xlido.entities.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

public class App {

    private UserService userService = new UserServiceImpl();
    private EventService eventService = new EventServiceImpl(userService);
    private QuestionService questionService = new QuestionServiceImpl(userService, eventService); // Pass services for validation


    public static void main(String[] args) {

        // Test your code by ading commands in sample_input/sample_input_one.txt
        // Run run.sh script using "bash run.sh" in your terminal.
        if (args.length == 1){
            List<String> commandLineArgs = new LinkedList<>(Arrays.asList(args));
            String inputFile = commandLineArgs.get(0).split("=")[1];
            try {
                List<String> file_commands = Files.readAllLines(Paths.get(inputFile));
                new App().run(file_commands);
            } catch (IOException e) {
                e.printStackTrace();
            }
            return;
        }

        List<String> inplace_commands = new LinkedList<>() {
            {
                // Test cases
                add("CREATE_USER,test1@user.com,abcd"); //User ID: 1
                add("CREATE_USER,test2@user.com,abcdefgh"); //User ID: 2
                add("CREATE_EVENT,Event1,1"); //Event ID: 1
                add("ADD_QUESTION,Is the mid-hinge resistant to outliers?,2,1"); // Question ID: 1
                add("REPLY_QUESTION,Yes. It is resistant to outliers,1,1"); // REPLY_ADDED
                add("REPLY_QUESTION,Yes. It is resistant to outliers,2,1"); // ERROR: Question with an id 2 Chands not exist
                add("REPLY_QUESTION,Yes. It is resistant to outliers,1,3"); //ERROR: User with an id 3 Chands not exist
            }
        };

        new App().run(inplace_commands);
    }

    public void run(List<String> commands) {
        for (String line : commands) {
            if (line == null) {
                break;
            }
            List<String> tokens = Arrays.asList(line.split(","));

            try {
                switch (tokens.get(0)) {
                    case "CREATE_USER":
                        String email = tokens.get(1);
                        String password = tokens.get(2);
                        int userId = userService.createUser(email, password);
                        System.out.println("User ID: " + userId);
                        break;

                    case "CREATE_EVENT":
                        String eventName = tokens.get(1);
                        int organizerId = Integer.parseInt(tokens.get(2));
                        int eventId = eventService.createEvent(eventName, organizerId);
                        System.out.println("Event ID: " + eventId);
                        break;
                    
                    case "DELETE_EVENT":
                        int eventToDeleteId = Integer.parseInt(tokens.get(1));
                        int requestingUserId = Integer.parseInt(tokens.get(2));
                        eventService.deleteEvent(eventToDeleteId, requestingUserId);
                        System.out.println("EVENT_DELETED " + eventToDeleteId);
                        break;

                    case "ADD_QUESTION":
                        String questionText = tokens.get(1);
                        int userIdForQuestion = Integer.parseInt(tokens.get(2));
                        int eventIdForQuestion = Integer.parseInt(tokens.get(3));

                        // Add question with validation
                        Question question = questionService.addQuestion(userIdForQuestion, eventIdForQuestion, questionText);
                        System.out.println("Question ID: " + question.getQuestionId());
                        break;

                    case "DELETE_QUESTION":
                        try {
                            int questionIdToDelete = Integer.parseInt(tokens.get(1));
                            int userIdToDelete = Integer.parseInt(tokens.get(2));  // Capture the user trying to delete
                            questionService.deleteQuestion(questionIdToDelete, userIdToDelete);  // Pass both questionId and userId
                        } catch (Exception e) {
                            System.out.println("ERROR: " + e.getMessage());
                        }
                        break;
                    
                    case "UPVOTE_QUESTION":
                        try {
                            int questionIdToUpvote = Integer.parseInt(tokens.get(1));
                            int userIdForUpvote = Integer.parseInt(tokens.get(2));
                            questionService.upvoteQuestion(questionIdToUpvote, userIdForUpvote);
                            System.out.println("QUESTION_UPVOTED " + questionIdToUpvote);
                        } catch (Exception e) {
                            System.out.println("ERROR: " + e.getMessage());
                        }
                        break;
                    case "REPLY_QUESTION":
                        String replyText = tokens.get(1); // Extract reply text from the command
                        int questionIdForReply  = Integer.parseInt(tokens.get(2)); // Extract user ID from the command
                        int replyUserId = Integer.parseInt(tokens.get(3)); // Extract question ID from the command
                        try {
                            questionService.replyToQuestion(questionIdForReply, replyUserId, replyText); // Call the service to add reply
                        } catch (Exception e) {
                            System.out.println("ERROR: " + e.getMessage()); // Handle any exceptions
                        }
                        break;
                    case "LIST_QUESTIONS":
                        // Extract parameters from command
                        int eventIdForListing = Integer.parseInt(tokens.get(1)); // Extract event ID
                        String sortBy = tokens.get(2); // Extract sort order

                        // Check if the event exists before listing questions
                        if (!eventService.isEventExists(eventIdForListing)) {
                            System.out.println("ERROR: Event with an id " + eventIdForListing + " Chands not exist");
                        } else {
                            // List questions for the event and sort them
                            questionService.listQuestions(eventIdForListing, sortBy);
                        }
                        break;
                    default:
                        throw new RuntimeException("INVALID_COMMAND");
                }
            } catch (Exception e) {
                System.out.println("ERROR: " + e.getMessage());
            }
        }
    }
}
